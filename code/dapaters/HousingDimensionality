{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Pandas display options\n",
    "import pandas as pd\n",
    "pd.options.display.max_rows = 999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "Active_Inconclusive_Properties = pd.read_excel('National Housing Preservation Database\\Active and Inconclusive Properties.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subset to Hillsborough, Miami-Dade and Orange counties\n",
    "Active_Inconclusive_Properties_data = Active_Inconclusive_Properties[Active_Inconclusive_Properties['County'].isin(['Hillsborough','Miami-Dade','Orange'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Columns after removing columns with high NAs 122\n"
     ]
    }
   ],
   "source": [
    "# NA cleaning \n",
    "# Subset cols which have less NAs than max_NA_percentage and drop them \n",
    "max_NA = 0.95\n",
    "Active_Inconclusive_Properties_data = Active_Inconclusive_Properties.loc[:, Active_Inconclusive_Properties.isnull().sum() < max_NA*Active_Inconclusive_Properties.shape[0]]\n",
    "print(\"Total Columns after removing columns with high NAs\", nhpd_data.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Incorporate Anabel and Sam's analysis of full and/or informative columns + which has usable data\n",
    "colstokeep=[\n",
    "'CountyCode',\n",
    "'CensusTract',\n",
    "'County',\n",
    "'ActiveSubsidies',\n",
    "'TotalInconclusiveSubsidies',\n",
    "'TotalInactiveSubsidies',\n",
    "'TotalUnits',\n",
    "'OwnerType',\n",
    "'TargetTenantType',\n",
    " 'ManagerType',\n",
    "'StudioOneBedroomUnits',\n",
    "'TwoBedroomUnits',\n",
    "'ThreePlusBedroomUnits',\n",
    "'FairMarketRent_2BR']\n",
    "Active_Inconclusive_Properties_data=Active_Inconclusive_Properties_data[colstokeep]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-18-d49f52bd988b>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Eldery or Disabled\", \"Elderly or Disabled\")\n",
      "<ipython-input-18-d49f52bd988b>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Mixed;Link\", \"Mixed\")\n",
      "<ipython-input-18-d49f52bd988b>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Indv. families - not eld/ handicap\", \"Family\")\n",
      "<ipython-input-18-d49f52bd988b>:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Senior\", \"Elderly\")\n",
      "<ipython-input-18-d49f52bd988b>:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Family & Elderly\", \"Mixed\")\n",
      "<ipython-input-18-d49f52bd988b>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Homeless Veterans\", \"Veterans\")\n",
      "<ipython-input-18-d49f52bd988b>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Mixed Income\", \"Mixed\")\n",
      "<ipython-input-18-d49f52bd988b>:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"OTHER\", \"Mixed\")\n",
      "<ipython-input-18-d49f52bd988b>:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Affordable\", \"Low Income\")\n",
      "<ipython-input-18-d49f52bd988b>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.title()\n"
     ]
    }
   ],
   "source": [
    "# Target Tenant Type cleaning\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Eldery or Disabled\", \"Elderly or Disabled\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Mixed;Link\", \"Mixed\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Indv. families - not eld/ handicap\", \"Family\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Senior\", \"Elderly\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Family & Elderly\", \"Mixed\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Homeless Veterans\", \"Veterans\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Mixed Income\", \"Mixed\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"OTHER\", \"Mixed\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.replace(\"Affordable\", \"Low Income\")\n",
    "Active_Inconclusive_Properties_data['TargetTenantType'] = Active_Inconclusive_Properties_data['TargetTenantType'].str.title()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_to_sum = ['ActiveSubsidies', 'TotalInconclusiveSubsidies',\n",
    "       'TotalInactiveSubsidies', 'TotalUnits', ]\n",
    "columns_to_average = ['TotalUnits',\n",
    " 'StudioOneBedroomUnits',\n",
    " 'TwoBedroomUnits',\n",
    " 'ThreePlusBedroomUnits',\n",
    " 'FairMarketRent_2BR']\n",
    "columns_for_mode = ['TargetTenantType','ManagerType', 'OwnerType']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "agg_dict = dict()\n",
    "\n",
    "for col in columns_to_sum:\n",
    "    agg_dict[col] = \"sum\"\n",
    "for col in columns_to_average:\n",
    "    agg_dict[col] = \"mean\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "nhpd_fl_census_tract = nhpd_data.groupby(['CensusTract', 'County', 'CountyCode']).agg(agg_dict).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "housing_loss =pd.concat([pd.read_csv('Housing Loss Data\\hillsborough_fl_processed_2017_to_2019_20210916.csv'),\n",
    "                       pd.read_csv('Housing Loss Data\\miami_dade_fl_processed_2017_to_2019_20210916.csv'),\n",
    "                       pd.read_csv('Housing Loss Data\\orange_fl_processed_2017_to_2019_20210916.csv')])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "housing_loss.rename(columns={'census_tract_GEOID':'CensusTract'},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "pca = PCA(n_components=3)\n",
    "\n",
    "nhpd_fl_census_tract_df = nhpd_fl_census_tract.drop(['CensusTract', 'County','county_GEOID', 'county', 'state'],axis=1)\n",
    "nhpd_fl_census_tract.fillna(value=0, inplace=True)\n",
    "# enc = OneHotEncoder(handle_unknown='ignore')\n",
    "# enc_result = enc.fit_transform(nhpd_fl_census_tract_df.iloc[:,:20])\n",
    "pca_result = pca.fit_transform(nhpd_fl_census_tract_df.iloc[:,1:20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "nhpd_fl_census_tract_df['pca-one'] = pca_result[:,0]\n",
    "nhpd_fl_census_tract_df['pca-two'] = pca_result[:,1] \n",
    "nhpd_fl_census_tract_df['pca-three'] = pca_result[:,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[t-SNE] Computing 121 nearest neighbors...\n",
      "[t-SNE] Indexed 354 samples in 0.009s...\n",
      "[t-SNE] Computed neighbors for 354 samples in 0.009s...\n",
      "[t-SNE] Computed conditional probabilities for sample 354 / 354\n",
      "[t-SNE] Mean sigma: 3057.756694\n",
      "[t-SNE] KL divergence after 250 iterations with early exaggeration: 54.943863\n",
      "[t-SNE] KL divergence after 300 iterations: 0.260593\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from sklearn.manifold import TSNE\n",
    "time_start = time.time()\n",
    "tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\n",
    "tsne_results = tsne.fit_transform(nhpd_fl_census_tract_df.iloc[:,1:20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "nhpd_fl_census_tract_df['tsne-2d-one'] = tsne_results[:,0]\n",
    "nhpd_fl_census_tract_df['tsne-2d-two'] = tsne_results[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='tsne-2d-one', ylabel='tsne-2d-two'>"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "plt.figure(figsize=(16,10))\n",
    "sns.scatterplot(\n",
    "    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n",
    "#     hue=\"y\",\n",
    "    palette=sns.color_palette(\"hls\", 10),\n",
    "    data=nhpd_fl_census_tract_df,\n",
    "    legend=\"full\",\n",
    "    alpha=0.3\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='tsne-2d-one', ylabel='tsne-2d-two'>"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,7))\n",
    "ax1 = plt.subplot(1, 2, 1)\n",
    "sns.scatterplot(\n",
    "    x=\"pca-one\", y=\"pca-two\",\n",
    "#     hue=\"y\",\n",
    "    palette=sns.color_palette(\"hls\", 10),\n",
    "    data=nhpd_fl_census_tract_df,\n",
    "    legend=\"full\",\n",
    "    alpha=0.3,\n",
    "    ax=ax1\n",
    ")\n",
    "ax2 = plt.subplot(1, 2, 2)\n",
    "sns.scatterplot(\n",
    "    x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n",
    "#     hue=\"y\",\n",
    "    palette=sns.color_palette(\"hls\", 10),\n",
    "    data=nhpd_fl_census_tract_df,\n",
    "    legend=\"full\",\n",
    "    alpha=0.3,\n",
    "    ax=ax2\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
